{"version":3,"sources":["ching-plugin.js","serviceWorker.ts","index.tsx"],"names":["Ching","pluginContext","onQRScanned","qr","pluginCtx","console","log","txDetails","scan","exec","to","tokenName","amount","orderId","getTxDetails","actions","send","asset","toLowerCase","ether","message","concat","onSent","tx","txMessage","getOrderId","url","hash","axios","get","then","response","Boolean","window","location","hostname","match","exch","ERC20Asset","id","name","network","address","brass","it","transit","sams","trf","core","BurnerCore","signers","InjectedSigner","LocalSigner","gateways","InjectedGateway","InfuraGateway","process","XDaiGateway","assets","xdai","ReactDOM","render","react_default","a","createElement","dist_default","plugins","ChingPlugin","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAoBqBA,2GACFC,GAcfA,EAAcC,YAAY,SAACC,EAAIC,GAC7BC,QAAQC,IAAI,WAAYH,GAExB,IAAMI,EAnCZ,SAAsBJ,GACpB,IACMK,EADQ,4DACKC,KAAKN,GACxB,OAAOK,GAAQ,CACbE,GAAIF,EAAK,GACTG,UAAWH,EAAK,IAAM,OACtBI,OAAQJ,EAAK,GACbK,QAASL,EAAK,IA4BMM,CAAaX,GAC/B,GAAKI,EAaL,OATAF,QAAQC,IAAIC,GAEZH,EAAUW,QAAQC,KAAK,CACrBN,GAAIH,EAAUG,GACdO,MAAOV,EAAUI,UAAUO,cAC3BC,MAAOZ,EAAUK,OACjBQ,QAAO,gBAAAC,OAAkBd,EAAUM,YAG9B,IAITZ,EAAcqB,OAAO,SAAAC,GACnBlB,QAAQC,IAAI,QAAS,CAAEiB,OAEvB,IAAMV,EA7CZ,SAAoBW,GAClB,IACMhB,EADQ,qBACKC,KAAKe,GACxB,OAAOhB,GAAQA,EAAK,GA0CAiB,CAAWF,EAAGH,SAC9B,GAAKP,EAAL,CAIA,IAAIa,EACF,2EACab,EACb,WAAaU,EAAGI,KAChB,iBAEFtB,QAAQC,IAAI,wBAAyBoB,GAErCE,IAAMC,IAAIH,GAAKI,KAAK,SAAAC,GAClB1B,QAAQC,IAAI,sCAAuCyB,iBC7DvCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFN,IAAMC,EAAO,IAAIC,aAAW,CAC1BC,GAAI,OACJC,KAAM,OACNC,QAAS,MACTC,QAAS,+CAGLC,EAAQ,IAAIL,aAAW,CAC3BC,GAAI,QACJC,KAAM,QACNC,QAAS,MACTC,QAAS,+CAGLE,EAAK,IAAIN,aAAW,CACxBC,GAAI,KACJC,KAAM,KACNC,QAAS,MACTC,QAAS,+CAGLG,EAAU,IAAIP,aAAW,CAC7BC,GAAI,UACJC,KAAM,UACNC,QAAS,MACTC,QAAS,+CAGLI,EAAO,IAAIR,aAAW,CAC1BC,GAAI,OACJC,KAAM,OACNC,QAAS,MACTC,QAAS,+CAGLK,EAAM,IAAIT,aAAW,CACzBC,GAAI,MACJC,KAAM,MACNC,QAAS,MACTC,QAAS,+CAGLM,EAAO,IAAIC,IAAW,CAC1BC,QAAS,CAAC,IAAIC,iBAAkB,IAAIC,eACpCC,SAAU,CACR,IAAIC,kBACJ,IAAIC,gBAAcC,oCAClB,IAAIC,eAENC,OAAQ,CAACrB,EAAMM,EAAOC,EAAIC,EAASC,EAAMC,EAAKY,UAOhDC,IAASC,OAAOC,EAAAC,EAAAC,cAJK,kBACnBF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUf,KAAMA,EAAMkB,QAAS,CAAC,IAAIC,MAGtB,MAAkBC,SAASC,eAAe,SDiEpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.1069dde4.chunk.js","sourcesContent":["import axios from \"axios\";\n// import React from 'react';\n\nfunction getTxDetails(qr) {\n  const REGEX = /\\/payment\\/(0x[0-9a-f]{40})\\/((\\D\\w*)\\/)?([\\d.]+)\\/(\\w*)/i\n  const scan = REGEX.exec(qr)\n  return scan && {\n    to: scan[1],\n    tokenName: scan[3] || 'xdai',\n    amount: scan[4],\n    orderId: scan[5]\n  }\n}\n\nfunction getOrderId(txMessage) {\n  const REGEX = /Ching order: (\\w+)/\n  const scan = REGEX.exec(txMessage)\n  return scan && scan[1]\n}\n\nexport default class Ching {\n  initializePlugin(pluginContext) {\n    // // Add link to ching.store\n    // pluginContext.addElement('home-bottom', () =>\n    //   <a\n    //     href=\"https://app.ching.store\"\n    //     target=\"_blank\"\n    //     rel=\"noopener noreferrer\"\n    //     style={{ display: 'block', color: \"#333333\" }}\n    //   >\n    //     Make your own store with Ching!\n    //   </a>\n    // )\n\n    // Handle Ching QR codes\n    pluginContext.onQRScanned((qr, pluginCtx) => {\n      console.log(\"Scanned:\", qr)\n\n      const txDetails = getTxDetails(qr)\n      if (!txDetails) {\n        return\n      }\n\n      console.log(txDetails)\n\n      pluginCtx.actions.send({\n        to: txDetails.to,\n        asset: txDetails.tokenName.toLowerCase(),\n        ether: txDetails.amount,\n        message: `Ching order: ${txDetails.orderId}`\n      });\n\n      return true;\n    });\n\n    // Send txHash to Ching after sending a transaction\n    pluginContext.onSent(tx => {\n      console.log(\"Sent:\", { tx });\n\n      const orderId = getOrderId(tx.message)\n      if (!orderId) {\n        return\n      }\n\n      let url =\n        \"https://us-central1-daipos.cloudfunctions.net/transactionBuffer?\" +\n        \"orderId=\" + orderId +\n        \"&txHash=\" + tx.hash +\n        \"&networkId=100\";\n\n      console.log(\"Send tx details back:\", url);\n\n      axios.get(url).then(response => {\n        console.log(\"Finished hitting the Ching servers:\", response);\n      });\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { xdai, ERC20Asset } from \"@burner-wallet/assets\";\nimport BurnerCore from \"@burner-wallet/core\";\nimport { InjectedSigner, LocalSigner } from \"@burner-wallet/core/signers\";\nimport {\n  InfuraGateway,\n  InjectedGateway,\n  XDaiGateway\n} from \"@burner-wallet/core/gateways\";\nimport BurnerUI from \"@burner-wallet/ui\";\n\nimport ChingPlugin from \"./ching-plugin\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst exch = new ERC20Asset({\n  id: \"exch\",\n  name: \"EXCH\",\n  network: \"100\",\n  address: \"0x9b924c026325d307efb295108bafdfd29ecb3932\"\n});\n\nconst brass = new ERC20Asset({\n  id: \"brass\",\n  name: \"BRASS\",\n  network: \"100\",\n  address: \"0x1b10e34165419f475923cf56ba2157eb96fd846a\"\n});\n\nconst it = new ERC20Asset({\n  id: \"it\",\n  name: \"IT\",\n  network: \"100\",\n  address: \"0xd203308fff6ba932d7cdb8bbe12aea9d57204205\"\n});\n\nconst transit = new ERC20Asset({\n  id: \"transit\",\n  name: \"TRANSIT\",\n  network: \"100\",\n  address: \"0x628e704d318d44CABE1f5C96dEb663B296E2Ef5e\"\n});\n\nconst sams = new ERC20Asset({\n  id: \"sams\",\n  name: \"SAMS\",\n  network: \"100\",\n  address: \"0xa255aA327A63f7DBea1783512F54FFE187765d81\"\n});\n\nconst trf = new ERC20Asset({\n  id: \"trf\",\n  name: \"TRF\",\n  network: \"100\",\n  address: \"0xFEA8fb1CE5463A9f899Ad0399Afc9352023DBd0f\"\n});\n\nconst core = new BurnerCore({\n  signers: [new InjectedSigner(), new LocalSigner()],\n  gateways: [\n    new InjectedGateway(),\n    new InfuraGateway(process.env.REACT_APP_INFURA_KEY),\n    new XDaiGateway()\n  ],\n  assets: [exch, brass, it, transit, sams, trf, xdai]\n});\n\nconst BurnerWallet = () => (\n  <BurnerUI core={core} plugins={[new ChingPlugin()]} />\n);\n\nReactDOM.render(<BurnerWallet />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}