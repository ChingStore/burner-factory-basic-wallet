{"version":3,"sources":["serviceWorker.ts","exchange-bldg.js","ui/ExchBldg.js","index.tsx"],"names":["Boolean","window","location","hostname","match","URLREGEX","Component","ExchangeBldg","Object","classCallCheck","this","pluginContext","_pluginContext","onQRScanned","qr","pluginctx","test","scan","exec","actions","send","to","asset","ether","message","onSent","tx","console","log","url","hash","axios","get","then","response","getWeb3","network","exchangeBldg","ERC20Asset","id","name","address","brass","it","core","BurnerCore","signers","InjectedSigner","LocalSigner","gateways","InjectedGateway","InfuraGateway","process","XDaiGateway","assets","xdai","ReactDOM","render","react_default","a","createElement","dist_default","plugins","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oLCdAC,GCFgCC,mBDErB,uDAEIC,aACnB,SAAAA,IAAcC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,gEAOGI,GACfD,KAAKE,eAAiBD,EAKtBA,EAAcE,YAAY,SAACC,EAAIC,GAE7B,GAAIV,EAASW,KAAKF,GAAK,CACrB,IAAMG,EAAOZ,EAASa,KAAKJ,GAS3B,OAPAC,EAAUI,QAAQC,KAAK,CACrBC,GAAIJ,EAAK,GACTK,MAAOL,EAAK,GACZM,MAAON,EAAK,GACZO,QAASP,EAAK,MAGT,KAIXN,EAAcc,OAAO,SAAAC,GACnBC,QAAQC,IAAI,CAAEF,OAEd,IAAIG,EACJ,2EACAH,EAAGF,QACH,WACAE,EAAGI,KACH,iBAEAH,QAAQC,IAAI,OAAQC,GAEpBE,IAAMC,IAAIH,GAAKI,KAAK,SAAAC,GAClBP,QAAQC,IAAI,sCAAuCM,yCAMvD,OAAOxB,KAAKE,eAAeuB,QAAQzB,KAAK0B,kBEtCtCC,EAAe,IAAIC,aAAW,CAClCC,GAAI,OACJC,KAAM,OACNJ,QAAS,MACTK,QAAS,+CAGLC,EAAQ,IAAIJ,aAAW,CAC3BC,GAAI,QACJC,KAAM,QACNJ,QAAS,MACTK,QAAS,+CAGLE,EAAK,IAAIL,aAAW,CACxBC,GAAI,KACJC,KAAM,KACNJ,QAAS,MACTK,QAAS,+CAGLG,EAAO,IAAIC,IAAW,CAC1BC,QAAS,CAAC,IAAIC,iBAAkB,IAAIC,eACpCC,SAAU,CACR,IAAIC,kBACJ,IAAIC,gBAAcC,oCAClB,IAAIC,eAENC,OAAQ,CAACjB,EAAcK,EAAOC,EAAIY,UAWpCC,IAASC,OAAOC,EAAAC,EAAAC,cAJK,kBACnBF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUf,KAAMA,EAAMkB,QAAS,CAAE,IAAIvD,MAGvB,MAAkBwD,SAASC,eAAe,SHiFpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.b3c82db6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\nimport React from \"react\";\nimport Selector from \"./ui/ExchBldg\"\nimport SendPage from \"@burner-wallet/ui/dist/Pages/SendPage\"\nconst URLREGEX = /payment\\/(0x[0-9a-f]{40})\\/(\\w*)\\/([\\d\\.]+)\\/(\\w*)/i;\n\nexport default class ExchangeBldg {\n  constructor() {\n    // this.state = {\n    //   asset:\"it\",\n    //   to:'0xe8bF424E047372d249d0826c5567655ba3B72f18'\n    // }\n  }\n\n  initializePlugin(pluginContext) {\n    this._pluginContext = pluginContext;\n\n    // pluginContext.addElement('home-top', Selector)\n    // pluginContext.addPage('/pay', SendPage)\n\n    pluginContext.onQRScanned((qr, pluginctx) => {\n\n      if (URLREGEX.test(qr)) {\n        const scan = URLREGEX.exec(qr);\n\n        pluginctx.actions.send({\n          to: scan[1],\n          asset: scan[2],\n          ether: scan[3],\n          message: scan[4]\n        })\n\n        return true;\n      }\n    });\n\n    pluginContext.onSent(tx => {\n      console.log({ tx });\n\n      let url =\n      \"https://us-central1-daipos.cloudfunctions.net/transactionBuffer?orderId=\" +\n      tx.message +\n      \"&txHash=\" +\n      tx.hash +\n      \"&networkId=100\";\n\n      console.log(\"url:\", url);\n\n      axios.get(url).then(response => {\n        console.log(\"Finished hitting the Ching servers:\", response);\n      });\n    });\n  }\n\n  getWeb3() {\n    return this._pluginContext.getWeb3(this.network);\n  };\n}\n","import React, { Component } from 'react';\n\nexport default class Selector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assetId:'it'\n    }\n  }\n\n  render() {\n    const { burnerComponents, plugin, core } = this.props;\n    const { AssetSelector } = burnerComponents;\n\n    return (\n      <AssetSelector assets={[\"exch, brass, it\"]} selected={plugin.con} onChange={()=>{alert(\"bazinga!\")}}>\n\n      </AssetSelector>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { xdai, ERC20Asset } from \"@burner-wallet/assets\";\nimport BurnerCore from \"@burner-wallet/core\";\nimport { InjectedSigner, LocalSigner } from \"@burner-wallet/core/signers\";\nimport {\n  InfuraGateway,\n  InjectedGateway,\n  XDaiGateway\n} from \"@burner-wallet/core/gateways\";\nimport Exchange from \"@burner-wallet/exchange\";\nimport { xdaiBridge, uniswapDai } from \"@burner-wallet/exchange/pairs\";\nimport BurnerUI from \"@burner-wallet/ui\";\n// import LegacyPlugin from \"@burner-wallet/plugins/legacy\";\nimport ExchangeBldg from \"./exchange-bldg\";\n\nconst exchangeBldg = new ERC20Asset({\n  id: \"exch\",\n  name: \"EXCH\",\n  network: \"100\",\n  address: \"0x9b924c026325d307efb295108bafdfd29ecb3932\"\n});\n\nconst brass = new ERC20Asset({\n  id: \"brass\",\n  name: \"BRASS\",\n  network: \"100\",\n  address: \"0x1b10e34165419f475923cf56ba2157eb96fd846a\"\n});\n\nconst it = new ERC20Asset({\n  id: \"it\",\n  name: \"IT\",\n  network: \"100\",\n  address: \"0xd203308fff6ba932d7cdb8bbe12aea9d57204205\"\n});\n\nconst core = new BurnerCore({\n  signers: [new InjectedSigner(), new LocalSigner()],\n  gateways: [\n    new InjectedGateway(),\n    new InfuraGateway(process.env.REACT_APP_INFURA_KEY),\n    new XDaiGateway()\n  ],\n  assets: [exchangeBldg, brass, it, xdai]\n});\n\n// const exchange = new Exchange({\n//   pairs: [xdaiBridge, uniswapDai]\n// });\n\nconst BurnerWallet = () => (\n  <BurnerUI core={core} plugins={[ new ExchangeBldg()]} />\n);\n\nReactDOM.render(<BurnerWallet />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}